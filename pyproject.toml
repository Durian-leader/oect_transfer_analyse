[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "oect-transfer-analyse"
version = "1.0.0"
description = "Advanced analysis and visualization package for OECT transfer curves"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "lidonghao", email = "lidonghao100@outlook.com"}
]
maintainers = [
    {name = "lidonghao", email = "lidonghao100@outlook.com"}
]
keywords = [
    "OECT", 
    "electrochemical", 
    "transistor", 
    "transfer", 
    "analysis",
    "visualization",
    "animation",
    "stability",
    "drift",
    "time-series"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Multimedia :: Video"
]
requires-python = ">=3.8"

# Core dependencies
dependencies = [
    "oect-transfer==0.4.2",  # Core package dependency
    "numpy>=1.20.0",
    "pandas>=1.3.0"
]

# Optional dependencies
[project.optional-dependencies]
plotting = [
    "matplotlib>=3.5.0"
]
animation = [
    "matplotlib>=3.5.0",
    "opencv-python>=4.5.0",
    "Pillow>=8.0.0"
]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "black",
    "flake8",
    "mypy",
    "pre-commit",
    "matplotlib>=3.5.0",
    "opencv-python>=4.5.0",
    "Pillow>=8.0.0"
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme",
    "sphinxcontrib-napoleon",
    "matplotlib>=3.5.0"
]
all = [
    "matplotlib>=3.5.0",
    "opencv-python>=4.5.0", 
    "Pillow>=8.0.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/oect-transfer-analyse"
Documentation = "https://oect-transfer-analyse.readthedocs.io/"
Repository = "https://github.com/yourusername/oect-transfer-analyse.git"
"Bug Tracker" = "https://github.com/yourusername/oect-transfer-analyse/issues"
"Core Package" = "https://github.com/yourusername/oect-transfer"

[project.scripts]
oect-analyse = "oect_transfer_analyse.cli:main"

[tool.setuptools]
packages = ["oect_transfer_analyse"]

[tool.setuptools.package-data]
oect_transfer_analyse = ["py.typed"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Flake8 linting
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist"
]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "pandas.*",
    "numpy.*",
    "cv2.*",
    "PIL.*",
    "oect_transfer.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=oect_transfer_analyse",
    "--cov-report=term-missing"
]

# Coverage configuration  
[tool.coverage.run]
source = ["oect_transfer_analyse"]
omit = [
    "*/tests/*",
    "*/test_*.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "except ImportError:"
]